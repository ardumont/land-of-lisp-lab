(load "../07-graph/graph.lisp")

(defparameter
  *functions-edges* '((make-edge-list (edge-pair) (random-node))
                      (get-connected (direct-edges))
                      (find-islands (get-connected))
                      (connect-with-bridges (edge-pair))
                      (connect-all-islands (connect-with-bridges)
                                           (find-islands))
                      (edges-to-alist (direct-edges))
                      (add-cops (edge-pair))
                      (make-city-edges (connect-all-islands)
                                       (make-edge-list)
                                       (edges-to-alist)
                                       (add-cops))
                      (within-one (neighbors))
                      (within-two (within-one)
                                  (neighbors))
                      (make-city-nodes (random-node)
                                       (within-two)
                                       (within-one))
                      (find-empty-node (random-node)
                                       (find-empty-node))
                      (draw-city (ugraph->png))
                      (known-city-nodes (neighbors))
                      (known-city-edges ())
                      (draw-known-city (ugraph->png)
                                       (known-city-nodes)
                                       (known-city-edges))
                      (new-game (make-city-edges)
                                (make-city-nodes)
                                (find-empty-node)
                                (draw-city)
                                (draw-known-city))
                      (handle-new-place (draw-known-city)
                                        (handle-new-place))
                      (handle-direction (handle-new-place))
                      (walk (handle-direction))
                      (charge (handle-direction))))

;; compute the nodes from the assoc list of edges
(defun compute-nodes (functions-list)
  (let ((nodes nil))
    (mapc
     (lambda (nd)
       (unless (member (list (car nd)) nodes)
         (push (list (car nd)) nodes))
       (mapc (lambda (n)
               (unless (member (list n) nodes)
                 (push (list n) nodes)))
             (cadr nd)))
     functions-list)
    nodes))

(compute-nodes *functions-edges*)

;; compute the dot file
(defun graph-functions (functions)
  (graph->png "graph-functions.dot" (compute-nodes functions) functions))

(graph-functions *functions-edges*)
(display-graph  "graph-functions.dot.png")
